local Hallucinations = game:GetService("Players")
local Yourself = Hallucinations.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Catsaken = Rayfield:CreateWindow({
   Name = "Catsaken",
   Icon = 0,
   LoadingTitle = "cats",
   LoadingSubtitle = "meow",
   ShowText = "",
   Theme = "Bloom",
   ToggleUIKeybind = "K",
   DisableRayfieldPrompts = true,
   DisableBuildWarnings = true,
   ConfigurationSaving = {Enabled = true, FolderName = "cats", FileName = "catsaken"},
   KeySystem = false,
})

local Jason = game:GetService("ReplicatedStorage").Systems.Character.Game.Sprinting
local Noli = require(Jason)
local Elliot = {MaxStamina = 110, StaminaGain = 20, StaminaLoss = 10}
local ESP_ENABLED = false
local CHAMS = {}
local Killer = nil
local MIN_KILLER_HP = 200
local espConnections = {}
local function makeCham(char)
    if not char or not char:IsA("Model") then return end
    if CHAMS[char] then return end
    local highlight = Instance.new("Highlight")
    highlight.Name = "ZESP_CHAM"
    highlight.Adornee = char
    highlight.FillColor = Color3.new(1, 1, 1)
    highlight.FillTransparency = 0.5
    highlight.OutlineTransparency = 1
    highlight.Parent = game:GetService("CoreGui")
    CHAMS[char] = highlight
end
local function clearCham(char)
    if CHAMS[char] then
        CHAMS[char]:Destroy()
        CHAMS[char] = nil
    end
end
local function updateChamColor(plr)
    if not plr.Character or not CHAMS[plr.Character] then return end
    local hum = plr.Character:FindFirstChild("Humanoid")
    if not hum then return end
    if hum.Health >= MIN_KILLER_HP then
        Killer = plr
        CHAMS[plr.Character].FillColor = KillerColor
    else
        if plr ~= Killer then
            CHAMS[plr.Character].FillColor = SurvivorColor
        end
    end
end
local function refreshESP()
    if not ESP_ENABLED then return end
    for _, plr in pairs(Hallucinations:GetPlayers()) do
        if plr ~= Yourself and plr.Character then
            makeCham(plr.Character)
            updateChamColor(plr)
        end
    end
end
local function setupPlayer(plr)
    plr.CharacterAdded:Connect(function(char)
        task.wait(1)
        if ESP_ENABLED then
            makeCham(char)
            local hum = char:FindFirstChild("Humanoid")
            if hum then
                hum.HealthChanged:Connect(function()
                    updateChamColor(plr)
                end)
            end
            updateChamColor(plr)
        end
    end)
end
for _, plr in pairs(Hallucinations:GetPlayers()) do
    if plr ~= Yourself then
        setupPlayer(plr)
    end
end
Hallucinations.PlayerAdded:Connect(setupPlayer)
game:GetService("RunService").Heartbeat:Connect(function()
    if ESP_ENABLED then
        for char, _ in pairs(CHAMS) do
            if not char.Parent then clearCham(char) end
        end
        for _, plr in pairs(Hallucinations:GetPlayers()) do
            if plr ~= Yourself and plr.Character then
                updateChamColor(plr)
            end
        end
    end
end)
local function DoGenOrSmth()
    local IngameMapFolder = workspace:FindFirstChild("Map") and workspace.Map:FindFirstChild("Ingame")
    local SubMapFolder = IngameMapFolder and IngameMapFolder:FindFirstChild("Map")
    if SubMapFolder then
        for _, g in ipairs(SubMapFolder:GetChildren()) do
            if g.Name == "Generator" and g.Progress.Value < 100 then
                g.Remotes.RE:FireServer()
            end
        end
    end
end
local function JohnDoe()
   if Rayfield.Flags["infinite_stamina"].CurrentValue then
      Noli.StaminaLoss = 0
   else
      Noli.MaxStamina = tonumber(Rayfield.Flags["max_stamina"].CurrentValue) or Elliot.MaxStamina
      Noli.StaminaGain = tonumber(Rayfield.Flags["stamina_gain"].CurrentValue) or Elliot.StaminaGain
      Noli.StaminaLoss = tonumber(Rayfield.Flags["stamina_loss"].CurrentValue) or Elliot.StaminaLoss
   end
end
-- MAIN TAB --
local maintab = Catsaken:CreateTab("Main", 0)
local infstamina = maintab:CreateToggle({
   Name = "Infinite Stamina",
   CurrentValue = false,
   Flag = "infinite_stamina",
   Callback = function()
      JohnDoe()
   end,
})
local IMPORTANTLABEL = maintab:CreateSection("The 3 options under will not work if infinite stamina is on.")
local maxstamina = maintab:CreateInput({
   Name = "Max Stamina",
   CurrentValue = tostring(Elliot.MaxStamina),
   PlaceholderText = tostring(Elliot.MaxStamina),
   RemoveTextAfterFocusLost = false,
   Flag = "max_stamina",
   Callback = function(TextBoxValue)
      local num = tonumber(TextBoxValue)
      if num then
         Noli.MaxStamina = num
      end
   end,
})
local staminagain = maintab:CreateInput({
   Name = "Stamina Gain",
   CurrentValue = tostring(Elliot.StaminaGain),
   PlaceholderText = tostring(Elliot.StaminaGain),
   RemoveTextAfterFocusLost = false,
   Flag = "stamina_gain",
   Callback = function(TextBoxValue)
      local num = tonumber(TextBoxValue)
      if num then
         Noli.StaminaGain = num
      end
   end,
})
local staminaloss = maintab:CreateInput({
   Name = "Stamina Loss",
   CurrentValue = tostring(Elliot.StaminaLoss),
   PlaceholderText = tostring(Elliot.StaminaLoss),
   RemoveTextAfterFocusLost = false,
   Flag = "stamina_loss",
   Callback = function(TextBoxValue)
      local num = tonumber(TextBoxValue)
      if num then
         Noli.StaminaLoss = num
      end
   end,
})
-- VISUAL TAB --
local esptab = Catsaken:CreateTab("Visuals", 0)
local chamstoggleesp = esptab:CreateToggle({
   Name = "Chams",
   CurrentValue = false,
   Flag = "esp_toggle",
   Callback = function(val)
      ESP_ENABLED = val
      if ESP_ENABLED then
         refreshESP()
      else
         for char, _ in pairs(CHAMS) do
            clearCham(char)
         end
      end
   end,
})
local SurvivorsChams = esptab:CreateColorPicker({
    Name = "Survivor Chams Color",
    Color = Color3.fromRGB(255,255,255),
    Flag = "survivor_cham_picker",
    Callback = function(Value)
        SurvivorColor = Value
        refreshESP()
    end
})

local KillerChams = esptab:CreateColorPicker({
    Name = "Killer Chams Color",
    Color = Color3.fromRGB(255,255,255),
    Flag = "killer_cham_picker",
    Callback = function(Value)
        KillerColor = Value
        refreshESP()
    end
})


SurvivorColor = SurvivorsChams.Color
KillerColor = Color3.fromRGB(255,0,0)
-- GENS TAB --
local gentab = Catsaken:CreateTab("Generators", 0)
local GenCD = 3

local DoGeneratorButton = gentab:CreateButton({
    Name = "Do Generator",
    Callback = function()
        DoGenOrSmth()
    end
})
local AutoGenToggle = gentab:CreateToggle({
    Name = "Auto Generator",
    CurrentValue = false,
    Flag = "auto_gen",
    Callback = function(enabled)
        if espConnections["AutoGenLoop"] then
            espConnections["AutoGenLoop"]:Disconnect()
            espConnections["AutoGenLoop"] = nil
        end
        if enabled then
            espConnections["_AutoGenTimer"] = 0
            espConnections["AutoGenLoop"] = game:GetService("RunService").Heartbeat:Connect(function(delta)
                espConnections["_AutoGenTimer"] = espConnections["_AutoGenTimer"] + delta
                if espConnections["_AutoGenTimer"] >= GenCD then
                    espConnections["_AutoGenTimer"] = 0
                    DoGenOrSmth()
                end
            end)
        else
            espConnections["_AutoGenTimer"] = 0
        end
    end
})
local AutoGenSlider = gentab:CreateSlider({
    Name = "Generator Delay",
    Range = {2.5, 10},
    Increment = 0.1,
    Suffix = "s",
    CurrentValue = GenCD,
    Flag = "gen_delay_fuck_this_shit",
    Callback = function(value)
        GenCD = value
    end
})

-- U L T R A K I L L --
local autoblocktab = Catsaken:CreateTab("Parry.", 0)

local autoBlockOn = false
local looseFacing = true
local detectionRange = 18
local detectionRangeSq = detectionRange * detectionRange
local facingCheckEnabled = true

local autoblocktoggleXD = autoblocktab:CreateToggle({
    Name = "Auto Block",
    CurrentValue = false,
    Flag = "AutoBlockFR",
    Callback = function(state)
        autoBlockOn = state
    end,
})

local autoblockfacingcheckXD = autoblocktab:CreateToggle({
    Name = "Enable Facing Check",
    CurrentValue = true,
    Flag = "FacingCheckToggle",
    Callback = function(val)
        facingCheckEnabled = val
    end,
})

local autoblockfacingmodeXD = autoblocktab:CreateDropdown({
    Name = "Facing Check",
    Options = {"Loose", "Strict"},
    CurrentOption = "Loose",
    Flag = "FacingCheckMode",
    Callback = function(option)
        looseFacing = option == "Loose"
    end,
})

local autoblockdetectionrangeXD = autoblocktab:CreateInput({
    Name = "Detection Range",
    PlaceholderText = "18",
    RemoveTextAfterFocusLost = false,
    Flag = "DetectionRange",
    Callback = function(text)
        detectionRange = tonumber(text) or detectionRange
        detectionRangeSq = detectionRange * detectionRange
    end,
})
local autoBlockTriggerSounds = {
    ["102228729296384"]=true, ["140242176732868"]=true, ["112809109188560"]=true,
    ["136323728355613"]=true, ["115026634746636"]=true, ["84116622032112"]=true,
    ["108907358619313"]=true, ["127793641088496"]=true, ["86174610237192"]=true,
    ["95079963655241"]=true, ["101199185291628"]=true, ["119942598489800"]=true,
    ["84307400688050"]=true, ["113037804008732"]=true, ["105200830849301"]=true,
    ["75330693422988"]=true, ["82221759983649"]=true, ["81702359653578"]=true,
    ["108610718831698"]=true, ["112395455254818"]=true
}
local function fireRemoteBlock()
    local args = {"UseActorAbility","Block"}
    ReplicatedStorage:WaitForChild("Modules"):WaitForChild("Network"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
end
local function isFacing(localRoot, targetRoot)
    if not facingCheckEnabled then return true end
    local dir = (localRoot.Position - targetRoot.Position).Unit
    local dot = targetRoot.CFrame.LookVector:Dot(dir)
    return looseFacing and dot > -0.3 or dot > 0
end
local function extractNumericSoundId(sound)
    if not sound or not sound.SoundId then return nil end
    local sid = tostring(sound.SoundId)
    return sid:match("%d+")
end
local function getSoundWorldPosition(sound)
    if not sound then return nil end
    if sound.Parent and sound.Parent:IsA("BasePart") then
        return sound.Parent.Position
    end
    if sound.Parent and sound.Parent:IsA("Attachment") and sound.Parent.Parent and sound.Parent.Parent:IsA("BasePart") then
        return sound.Parent.Parent.Position
    end
    return nil
end
local function getCharacterFromDescendant(inst)
    if not inst then return nil end
    local model = inst:FindFirstAncestorOfClass("Model")
    if model and model:FindFirstChildOfClass("Humanoid") then
        return model
    end
    return nil
end
local soundBlockedUntil = {}
local function attemptBlockForSound(sound)
    if not autoBlockOn then return end
    if not sound or not sound:IsA("Sound") then return end
    if not sound.IsPlaying then return end
    local id = extractNumericSoundId(sound)
    if not id or not autoBlockTriggerSounds[id] then return end
    local t = tick()
    if soundBlockedUntil[sound] and t < soundBlockedUntil[sound] then return end
    local myChar = Yourself.Character
    local myRoot = myChar and myChar:FindFirstChild("HumanoidRootPart")
    if not myRoot then return end
    local soundPos = getSoundWorldPosition(sound)
    if not soundPos then return end
    local char = getCharacterFromDescendant(sound.Parent)
    local plr = char and Hallucinations:GetPlayerFromCharacter(char)
    if not plr or plr == Yourself then return end
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    local dvec = hrp.Position - myRoot.Position
    local distSq = dvec.X*dvec.X + dvec.Y*dvec.Y + dvec.Z*dvec.Z
    if distSq > detectionRangeSq then return end
    if facingCheckEnabled and not isFacing(myRoot, hrp) then return end
    fireRemoteBlock()
    soundBlockedUntil[sound] = t + 1.2
end
local soundHooks = {}
local function hookSound(sound)
    if not sound or not sound:IsA("Sound") then return end
    if soundHooks[sound] then return end
    local playedConn = sound.Played:Connect(function() pcall(attemptBlockForSound, sound) end)
    local propConn = sound:GetPropertyChangedSignal("IsPlaying"):Connect(function()
        if sound.IsPlaying then pcall(attemptBlockForSound, sound) end
    end)
    local destroyConn
    destroyConn = sound.Destroying:Connect(function()
        if playedConn and playedConn.Connected then playedConn:Disconnect() end
        if propConn and propConn.Connected then propConn:Disconnect() end
        if destroyConn and destroyConn.Connected then destroyConn:Disconnect() end
        soundHooks[sound] = nil
        soundBlockedUntil[sound] = nil
    end)
    soundHooks[sound] = {playedConn, propConn, destroyConn}
    if sound.IsPlaying then task.spawn(function() pcall(attemptBlockForSound, sound) end) end
end
for _, desc in ipairs(game:GetDescendants()) do
    if desc:IsA("Sound") then pcall(hookSound, desc) end
end
game.DescendantAdded:Connect(function(desc)
    if desc:IsA("Sound") then pcall(hookSound, desc) end
end)


-- MISC TAB --
local misctab = Catsaken:CreateTab("Misc", 0)
local fullbrightEnabled = false
local originalLightingSettings = {}
local fullbrightfr = misctab:CreateToggle({
    Name = "Fullbright",
    CurrentValue = false,
    Flag = "full_bright",
    Callback = function(enabled)
        fullbrightEnabled = enabled
        local Lighting = game:GetService("Lighting")
        if enabled then
            originalLightingSettings.Brightness = Lighting.Brightness
            originalLightingSettings.Ambient = Lighting.Ambient
            originalLightingSettings.ClockTime = Lighting.ClockTime
            originalLightingSettings.FogEnd = Lighting.FogEnd
            Lighting.Brightness = 2
            Lighting.Ambient = Color3.new(1, 1, 1)
            Lighting.ClockTime = 14
            Lighting.FogEnd = 100000
        else
            for k,v in pairs(originalLightingSettings) do
                Lighting[k] = v
            end
        end
    end
})

-- OPTIONS TAB --
local optab = Catsaken:CreateTab("Options", 0)
local ihatethis = optab:CreateDropdown({
    Name = "Theme Changer",
    Options = {"Default","AmberGlow","Amethyst","Bloom","DarkBlue","Green","Light","Ocean","Serenity"},
    CurrentOption = {"Bloom"},
    MultipleOptions = false,
    Flag = "theme_ch4ng3r",
    Callback = function(sel)
        local id = type(sel) == "table" and sel[1] or sel
        if not id then return end
        local function try_method(obj, key, arg)
            if not obj or type(obj[key]) ~= "function" then return false end
            local fn = obj[key]
            local ok = pcall(fn, arg)
            if ok then return true end
            ok = pcall(fn, obj, arg)
            if ok then return true end
            return false
        end
        local ok = try_method(Catsaken, "ModifyTheme", id)
        if ok then return end
        ok = try_method(Rayfield, "ModifyTheme", id)
        if ok then return end
        local function find_theme(name)
            if Rayfield and type(Rayfield.Themes) == "table" then
                local t = Rayfield.Themes[name] or Rayfield.Themes[name:gsub("%s","")] or Rayfield.Themes[name:lower()]
                if t then return t end
            end
            if Catsaken and type(Catsaken.Themes) == "table" then
                local t = Catsaken.Themes[name] or Catsaken.Themes[name:gsub("%s","")] or Catsaken.Themes[name:lower()]
                if t then return t end
            end
            return nil
        end
        local themeTable = find_theme(id)
        if themeTable then
            ok = try_method(Catsaken, "ModifyTheme", themeTable)
            if ok then return end
            ok = try_method(Rayfield, "ModifyTheme", themeTable)
            if ok then return end
        end
    end,
})

Yourself.CharacterAdded:Connect(function()
   task.wait(1)
   JohnDoe()
end)
JohnDoe()
Rayfield:LoadConfiguration()
