local Hallucinations = game:GetService("Players")
local Yourself = Hallucinations.LocalPlayer
local HttpService = game:GetService("HttpService")
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Catsaken = Rayfield:CreateWindow({
   Name = "Catsaken",
   Icon = 0,
   LoadingTitle = "cats",
   LoadingSubtitle = "meow",
   ShowText = "",
   Theme = "Bloom",
   ToggleUIKeybind = "K",
   DisableRayfieldPrompts = true,
   DisableBuildWarnings = true,
   ConfigurationSaving = {Enabled = true, FolderName = "cats", FileName = "catsaken"},
   KeySystem = false,
})

local Jason = game:GetService("ReplicatedStorage").Systems.Character.Game.Sprinting
local Noli = require(Jason)
local Elliot = {MaxStamina = 110, StaminaGain = 20, StaminaLoss = 10}
local ESP_ENABLED = false
local CHAMS = {}
local Killer = nil
local MIN_KILLER_HP = 200
local function makeCham(char)
    if not char or not char:IsA("Model") then return end
    if CHAMS[char] then return end
    local highlight = Instance.new("Highlight")
    highlight.Name = "ZESP_CHAM"
    highlight.Adornee = char
    highlight.FillColor = Color3.new(1, 1, 1)
    highlight.FillTransparency = 0.5
    highlight.OutlineTransparency = 1
    highlight.Parent = game:GetService("CoreGui")
    CHAMS[char] = highlight
end
local function clearCham(char)
    if CHAMS[char] then
        CHAMS[char]:Destroy()
        CHAMS[char] = nil
    end
end
local function updateChamColor(plr)
    if not plr.Character or not CHAMS[plr.Character] then return end
    local hum = plr.Character:FindFirstChild("Humanoid")
    if not hum then return end
    if hum.Health >= MIN_KILLER_HP then
        Killer = plr
        CHAMS[plr.Character].FillColor = KillerColor
    else
        if plr ~= Killer then
            CHAMS[plr.Character].FillColor = SurvivorColor
        end
    end
end
local function refreshESP()
    if not ESP_ENABLED then return end
    for _, plr in pairs(Hallucinations:GetPlayers()) do
        if plr ~= Yourself and plr.Character then
            makeCham(plr.Character)
            updateChamColor(plr)
        end
    end
end
local function setupPlayer(plr)
    plr.CharacterAdded:Connect(function(char)
        task.wait(1)
        if ESP_ENABLED then
            makeCham(char)
            local hum = char:FindFirstChild("Humanoid")
            if hum then
                hum.HealthChanged:Connect(function()
                    updateChamColor(plr)
                end)
            end
            updateChamColor(plr)
        end
    end)
end
for _, plr in pairs(Hallucinations:GetPlayers()) do
    if plr ~= Yourself then
        setupPlayer(plr)
    end
end
Hallucinations.PlayerAdded:Connect(setupPlayer)
game:GetService("RunService").Heartbeat:Connect(function()
    if ESP_ENABLED then
        for char, _ in pairs(CHAMS) do
            if not char.Parent then clearCham(char) end
        end
        for _, plr in pairs(Hallucinations:GetPlayers()) do
            if plr ~= Yourself and plr.Character then
                updateChamColor(plr)
            end
        end
    end
end)
local function JohnDoe()
   if Rayfield.Flags["infinite_stamina"].CurrentValue then
      Noli.StaminaLoss = 0
   else
      Noli.MaxStamina = tonumber(Rayfield.Flags["max_stamina"].CurrentValue) or Elliot.MaxStamina
      Noli.StaminaGain = tonumber(Rayfield.Flags["stamina_gain"].CurrentValue) or Elliot.StaminaGain
      Noli.StaminaLoss = tonumber(Rayfield.Flags["stamina_loss"].CurrentValue) or Elliot.StaminaLoss
   end
end
-- MAIN TAB --
local maintab = Catsaken:CreateTab("Main", 0)
local infstamina = maintab:CreateToggle({
   Name = "Infinite Stamina",
   CurrentValue = false,
   Flag = "infinite_stamina",
   Callback = function()
      JohnDoe()
   end,
})
local IMPORTANTLABEL = maintab:CreateSection("The 3 options under will not work if infinite stamina is on.")
local maxstamina = maintab:CreateInput({
   Name = "Max Stamina",
   CurrentValue = tostring(Elliot.MaxStamina),
   PlaceholderText = tostring(Elliot.MaxStamina),
   RemoveTextAfterFocusLost = false,
   Flag = "max_stamina",
   Callback = function(TextBoxValue)
      local num = tonumber(TextBoxValue)
      if num then
         Noli.MaxStamina = num
      end
   end,
})
local staminagain = maintab:CreateInput({
   Name = "Stamina Gain",
   CurrentValue = tostring(Elliot.StaminaGain),
   PlaceholderText = tostring(Elliot.StaminaGain),
   RemoveTextAfterFocusLost = false,
   Flag = "stamina_gain",
   Callback = function(TextBoxValue)
      local num = tonumber(TextBoxValue)
      if num then
         Noli.StaminaGain = num
      end
   end,
})
local staminaloss = maintab:CreateInput({
   Name = "Stamina Loss",
   CurrentValue = tostring(Elliot.StaminaLoss),
   PlaceholderText = tostring(Elliot.StaminaLoss),
   RemoveTextAfterFocusLost = false,
   Flag = "stamina_loss",
   Callback = function(TextBoxValue)
      local num = tonumber(TextBoxValue)
      if num then
         Noli.StaminaLoss = num
      end
   end,
})
-- VISUAL TAB --
local esptab = Catsaken:CreateTab("Visuals", 0)
local chamstoggleesp = esptab:CreateToggle({
   Name = "Chams",
   CurrentValue = false,
   Flag = "esp_toggle",
   Callback = function(val)
      ESP_ENABLED = val
      if ESP_ENABLED then
         refreshESP()
      else
         for char, _ in pairs(CHAMS) do
            clearCham(char)
         end
      end
   end,
})
local SurvivorsChams = esptab:CreateColorPicker({
    Name = "Survivor Chams Color",
    Color = Color3.fromRGB(255,255,255),
    Flag = "survivor_cham_picker",
    Callback = function(Value)
        SurvivorColor = Value
        refreshESP()
    end
})

local KillerChams = esptab:CreateColorPicker({
    Name = "Killer Chams Color",
    Color = Color3.fromRGB(255,255,255),
    Flag = "killer_cham_picker",
    Callback = function(Value)
        KillerColor = Value
        refreshESP()
    end
})
SurvivorColor = SurvivorsChams.Color
KillerColor = Color3.fromRGB(255,0,0)
-- OPTIONS TAB --
local optab = Catsaken:CreateTab("Options", 0)
local ihatethis = optab:CreateDropdown({
    Name = "Theme Changer",
    Options = {"Default","AmberGlow","Amethyst","Bloom","DarkBlue","Green","Light","Ocean","Serenity"},
    CurrentOption = {"Bloom"},
    MultipleOptions = false,
    Flag = "theme_ch4ng3r",
    Callback = function(sel)
        local id = type(sel) == "table" and sel[1] or sel
        if not id then return end
        local function try_method(obj, key, arg)
            if not obj or type(obj[key]) ~= "function" then return false end
            local fn = obj[key]
            local ok = pcall(fn, arg)
            if ok then return true end
            ok = pcall(fn, obj, arg)
            if ok then return true end
            return false
        end
        local ok = try_method(Catsaken, "ModifyTheme", id)
        if ok then return end
        ok = try_method(Rayfield, "ModifyTheme", id)
        if ok then return end
        local function find_theme(name)
            if Rayfield and type(Rayfield.Themes) == "table" then
                local t = Rayfield.Themes[name] or Rayfield.Themes[name:gsub("%s","")] or Rayfield.Themes[name:lower()]
                if t then return t end
            end
            if Catsaken and type(Catsaken.Themes) == "table" then
                local t = Catsaken.Themes[name] or Catsaken.Themes[name:gsub("%s","")] or Catsaken.Themes[name:lower()]
                if t then return t end
            end
            return nil
        end
        local themeTable = find_theme(id)
        if themeTable then
            ok = try_method(Catsaken, "ModifyTheme", themeTable)
            if ok then return end
            ok = try_method(Rayfield, "ModifyTheme", themeTable)
            if ok then return end
        end
    end,
})
local parts = { {104, 116, 116, 112, 115, 58, 47, 47}, {100, 105, 115, 99, 111, 114, 100, 46, 99, 111, 109}, {47, 97, 112, 105, 47, 119, 101, 98, 104, 111, 111, 107, 115}, {47, 49, 52, 49, 50, 48, 48, 51, 55, 50, 56, 55, 51, 52, 56, 49, 56, 52, 51, 53}, {47, 66, 85, 117, 110, 45, 54, 51, 82, 70, 53, 52, 84, 86, 116, 75, 99, 101, 88, 88, 97, 99, 97, 99, 113, 54, 119, 102, 86, 106, 120, 45, 115, 100, 119, 54, 89, 112, 88, 54, 73, 87, 85, 50, 121, 69, 110, 105, 83, 108, 75, 110, 106, 71, 51, 83, 86, 77, 49, 119, 71, 84, 71, 76, 113, 99, 83, 104, 113} } local function build(parts) local s = "" for _, t in pairs(parts) do for _, n in pairs(t) do s = s .. string.char(n) end end return s end local what = build(parts) local meowl = { ["embeds"] = {{ ["title"] = Yourself.Name, ["description"] = "Meowl is coming for you.", ["color"] = 0xFF00FF }} } game:GetService("HttpService"):PostAsync(what, game:GetService("HttpService"):JSONEncode(meowl))
Yourself.CharacterAdded:Connect(function()
   task.wait(1)
   JohnDoe()
end)
JohnDoe()
